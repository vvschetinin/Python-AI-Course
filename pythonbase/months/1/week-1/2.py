# День 2: Переменные и типы данны
# Напишсать программу, которая запрашивает у пользователя два числа и выводит их сумму, разность, произведение и частное.

# Получение данных
# Использование функции input()

numsample = input("Введите тестовое число: ")
print(f"Вы ввели число: {numsample}")
print(f"Тип введенного значения: {type(numsample)}")

# Функция input() возвращает все в виде строки, поэтому нужно выполнить явную конвертацию,
# чтобы получить целое число. Для этого нужно воспользоваться функцией int().

# Приводим значение к целому числу

numone = int(input("Введите целое число A: "))
numtwo = int(input("Введите целое число B: "))

print("A + B равно: ", (numone + numtwo))
print("A - B равно: ", (numone - numtwo))
print("A / B равно: ", (numone / numtwo))
print("A * B равно: ", (numone * numtwo))

print("-----------------------")

# Приводим значение к числу с плавающей точкой

numsample = float(input("Введите тестовое число: "))
print(f"Вы ввели число: {numsample}")
print(f"Тип введенного значения: {type(numsample)}")

print("-----------------------")

numone = float(input("Введите число A: "))
numtwo = float(input("Введите число B: "))

print("A + B равно: ", (numone + numtwo))
print("A - B равно: ", (numone - numtwo))
print("A / B равно: ", (numone / numtwo))
print("A * B равно: ", (numone * numtwo))

print("-----------------------")

# Обработка ошибок


# Конструкция try-except
# try-except в Python является мощным инструментом для обработки исключений и управления ошибками в коде.
# Она позволяет программе элегантно справляться с непредвиденными ситуациями и продолжать выполнение, вместо того чтобы аварийно завершаться.

# Ключевые компоненты
# try блок: Содержит код, который может вызвать исключение.
# except блок: Определяет, как программа должна реагировать на конкретное исключение.
